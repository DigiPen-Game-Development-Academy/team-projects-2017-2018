//Jacob Burke

//This is the script for the player's health

class Health : ZilchComponent
{
    var PreviousVelocity:Real3;
    [Static]
    var CurrentHealth:Real;
    
    [Static]
    var MaxHealth:Real = 20;
    
    [Property]
    var LevelToLoad:Level;
    
    [Property]
    var Timer:Real = 5;
    
    [Property]
    var DamageColor:Real4;
    [Property]
    var RegularColor:Real4;
    
    [Property]
    var HitSoundThing : SoundCue = SoundCue.PlayerHit;
    
    [Static]
    var IsDead : Boolean = false;
    
    var Timer2:Real = 0.2;
    var Timer3:Real = 0;
    var Timer4:Real;
    var Timer5:Real = 1;
    
    var Invincibility : Boolean = false;
    var InvincibilityTimer : Real = 0.5;
    
    [Property] var BaseLevelLoad : Level = Level.BaseLevel;
    
    //This is for scattering dropped items
    var RandomDieRoll:Real;
    
    
    var Gear : Archetype = Archetype.Gear;
    var Food : Archetype = Archetype.Food;
    var HealthPotion : Archetype = Archetype.HealthPotion;
    var TimesRepeated : Integer = 1;
    
    [Static] var CheckOnce : Boolean = false;
    [Static] var CheckTwice : Boolean = false;
    [Property] var LandingPoof : Archetype = Archetype.LandingPoof;
    
    [Static] var RegenOff : Boolean = false;
    var OnlyFirstTime : Boolean = true;
    var BossLevel : Boolean = false;
        
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
       
       if(this.Space.FindObjectByName("BOSS") != null)
       {
           this.BossLevel = true;
       }
        
        Health.CurrentHealth = Health.MaxHealth;
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.BulletLogic != null && Health.CurrentHealth > 0 && this.Invincibility == false && this.Owner.PlayerController.Dead == false)
        {
             //This is Elena's script for armor working/////////////////////////
            if(AdvInventory.PlayerInventory["ArmorVolcano"] >= 1)
            {
               Health.CurrentHealth -= 1.5;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1)
            {
               Health.CurrentHealth -= 1.75;
            }
             else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1 && AdvInventory.PlayerInventory["ArmorVolcano"] >=1)
            {
                Health.CurrentHealth -= 1;
            }
            else{Health.CurrentHealth -= 2;}

            //This is the end of my script//////////////////
            this.Owner.SoundEmitter.PlayCue(this.HitSoundThing);
            this.Owner.Sprite.Color = this.DamageColor;
            this.Invincibility = true;
           
        }
        
        if(event.OtherObject.Name == ("DefaultTile") && this.PreviousVelocity.Y <= -20)
        {
            this.GameSession.DispatchEvent(Events.Shake, ShakeEvent(0.2,0.4,0.0001, Ease.Linear, 4));
        }
         if(event.OtherObject.Name == ("DefaultTile") && this.PreviousVelocity.Y <= -4
         && this.Owner.GroundChecker.Grounded == true)
        {
            this.Space.CreateAtPosition(this.LandingPoof, this.Owner.Transform.WorldTranslation - Real3(0,1,1));
        }
    }

    function OnCollisionPersisted(event : CollisionEvent)
    {
        if(event.OtherObject.Checkpoint != null)
        Checkpoint.RespawnPosition = this.Owner.Transform.Translation;
        
        if(event.OtherObject.EnemyHealth != null && Health.CurrentHealth > 0 && this.Invincibility == false)
        {
            this.GameSession.DispatchEvent(Events.Shake, ShakeEvent(0.4,0.8,0.001, Ease.Linear, 7));
             //This is Elena's script for armor working/////////////////////////
            if(AdvInventory.PlayerInventory["ArmorVolcano"] >= 1)
            {
               Health.CurrentHealth -= 1.5;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1)
            {
               Health.CurrentHealth -= 1.75;
            }
             else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1 && AdvInventory.PlayerInventory["ArmorVolcano"] >=1)
            {
                Health.CurrentHealth -= 1;
            }
            else{Health.CurrentHealth -= 2;}

            //This is the end of my script//////////////////
            if(event.OtherObject.Name == ("BOSS"))
            {
           //This is Elena's script for armor working/////////////////////////
            if(AdvInventory.PlayerInventory["ArmorVolcano"] >= 1)
            {
               Health.CurrentHealth -= 2.25;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1)
            {
               Health.CurrentHealth -= 2.5;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1 && AdvInventory.PlayerInventory["ArmorVolcano"] >=1)
            {
                Health.CurrentHealth -= 1.5;
            }
            else{Health.CurrentHealth -= 3;}
            //This is the end of my script//////////////////
            }
            this.Owner.Sprite.Color = this.DamageColor;
            this.Owner.SoundEmitter.PlayCue(this.HitSoundThing);
            this.Invincibility = true;
        }
        
        if(event.OtherObject.JaggedRock != null && Health.CurrentHealth > 0 && this.Invincibility == false)
        {
            this.GameSession.DispatchEvent(Events.Shake, ShakeEvent(0.2,0.5,0.001, Ease.Linear, 5));
            this.Owner.Sprite.Color = this.DamageColor;
            this.Owner.SoundEmitter.PlayCue(this.HitSoundThing);
            this.Invincibility = true;
          //This is Elena's script for armor working/////////////////////////
            if(AdvInventory.PlayerInventory["ArmorVolcano"] >= 1)
            {
               Health.CurrentHealth -= 1.30;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1)
            {
               Health.CurrentHealth -= 1.70;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1 && AdvInventory.PlayerInventory["ArmorVolcano"] >=1)
            {
                Health.CurrentHealth -= 1;
            }
            else{Health.CurrentHealth -= 2;}
            //This is the end of my script//////////////////
        }
        if(event.OtherObject.Explosion != null && Health.CurrentHealth > 0 && this.Invincibility == false)
        {
            this.Owner.Sprite.Color = this.DamageColor;
            this.Owner.SoundEmitter.PlayCue(this.HitSoundThing);
            this.Invincibility = true;
            //This is Elena's script for armor working/////////////////////////
            if(AdvInventory.PlayerInventory["ArmorVolcano"] >= 1)
            {
               Health.CurrentHealth -= 1.30;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1)
            {
               Health.CurrentHealth -= 1.70;
            }
            else if(AdvInventory.PlayerInventory["ArmorCopper"] >= 1 && AdvInventory.PlayerInventory["ArmorVolcano"] >=1)
            {
                Health.CurrentHealth -= 1;
            }
            else{Health.CurrentHealth -= 2;}
            //This is the end of my script//////////////////
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.PreviousVelocity = this.Owner.RigidBody.Velocity;
        
        if(this.Space.CurrentLevel == Level.TheBestBossLevel_InTheWorld && Health.CurrentHealth <=0)
        {
            this.GameSession.DispatchEvent
            (Events.Fade, FadeEvent(this.BaseLevelLoad, 1, Real4.Zero, Real4(0,0,0,1)));
            
            
            if(this.OnlyFirstTime == true)
            {
                this.Owner.RigidBody.Static = true;
                this.Owner.Sprite.Visible = false;
                
                this.Space.CreateAtPosition(Archetype.ExplodeBubbles, this.Owner.Transform.Translation); 
                this.Space.CreateAtPosition(Archetype.LegendaryExplode, this.Owner.Transform.Translation);
                this.Space.CreateAtPosition(Archetype.PlayerDeath, this.Owner.Transform.Translation);
                
                 NumOfDeaths.NumberOfDeaths += 1;
                 this.OnlyFirstTime = false;
             }
                 
            if(this.Timer5 > 0) this.Timer5 -= event.Dt;
            if(this.Timer5 <= 0)
            {
                Health.CurrentHealth = Health.MaxHealth;
                
                
                Hunger.Hunger = Hunger.MaxHunger;
                
                this.Owner.RigidBody.Static = false;
                this.Owner.Sprite.Visible = true;
                this.OnlyFirstTime = true;
                Health.RegenOff = false;
                Inventory.Exists = false;
                Health.CurrentHealth -= 1;
                
                this.Timer5 += 1;
            }
        }
        
        if(this.Timer > 0 && Hunger.Hunger <= 1)
        {
             
        this.Timer -= event.Dt;
        }
        else if(this.Timer <= 0)
        {
            Health.CurrentHealth -= 1;
            
            this.Timer += 5;
        }
        
        //Initializes Rings
        
        if(AdvInventory.PlayerInventory["Ring_Health"] >= 1 && Health.CheckTwice == false)
        {
            Health.CheckTwice = true;
           Health.MaxHealth = Health.MaxHealth + 10;
           
           //This makes sure you don't start a level without max health
           Health.CurrentHealth = Health.MaxHealth;
        }
        
        if(this.Invincibility == true && this.InvincibilityTimer > 0)
        {
            this.InvincibilityTimer -= event.Dt;
        }
        
        else if(this.InvincibilityTimer <= 0)
        {
            this.Invincibility = false;
            this.InvincibilityTimer = 0.5;
        }
        
        if(this.Timer3 > 0) this.Timer3 -= event.Dt;
        if(Health.CurrentHealth <= 5 && this.Timer3 <= 0)
        {
            //this.Owner.Sprite.Color = this.DamageColor;
            //this.Timer3 += 1;
        }
        
        if(this.Owner.Sprite.Color == this.DamageColor)
        {
            this.Timer2 -= event.Dt;
        }
        if(this.Timer2 <= 0)
        {
            this.Timer2 += 0.2;
            this.Owner.Sprite.Color = this.RegularColor;
        }
        //God Mode By Jessica. Because I am bored of getting killed by gear shark.
        if(Zero.Keyboard.KeyIsDown(Keys.G) && Zero.Keyboard.KeyIsDown(Keys.Alt))
        {
            Health.CurrentHealth += 1000;
            Health.MaxHealth += 1000;
        }
        
        
        //DEATH
        if(Health.CurrentHealth <= 0 && this.BossLevel == false)
        {
            Health.IsDead = true;
            var position = this.Owner.Transform.Translation;
            Health.RegenOff = true;
            Inventory.Exists = true;
            
            if (this.Owner.PlayerController.Dead == false)
            {
                this.Owner.PlayerController.Dead = true;
                this.Owner.RigidBody.Static = true;
                this.Owner.Sprite.Visible = false;
                
                this.Space.CreateAtPosition(Archetype.ExplodeBubbles, this.Owner.Transform.Translation); 
                this.Space.CreateAtPosition(Archetype.LegendaryExplode, this.Owner.Transform.Translation);
                this.Space.CreateAtPosition(Archetype.PlayerDeath, this.Owner.Transform.Translation);
                
                 NumOfDeaths.NumberOfDeaths += 1;
                
                this.InvincibilityTimer = 3;
                
                this.Invincibility = true;
                
                    if(AdvInventory.PlayerInventory["Gears"] >= 0
                    && AdvInventory.PlayerInventory["Gears"] < 11)
                    {
                        while(AdvInventory.PlayerInventory["Gears"] > 0)
                        {
                        var rand = new Random();
                        this.RandomDieRoll = rand.DieRoll(10);
                        var randomVelocityNegative = rand.DieRoll(10) - 5;
                        var randomVelocityPositive = rand.DieRoll(10) - 5;
                        
                        var treasure = this.Space.CreateAtPosition(Archetype.Gear, position);
                        AdvInventory.PlayerInventory["Gears"] -= 1;
                        
                        treasure.RigidBody.Velocity = Real3(randomVelocityNegative,randomVelocityPositive, 0);
                        }
                    }
                
                else
                {
                    for(var i = 10; i > 0; --i)
                    {
                        var rand = new Random();
                        this.RandomDieRoll = rand.DieRoll(10);
                        var randomVelocityNegative = rand.DieRoll(10) - 5;
                        var randomVelocityPositive = rand.DieRoll(10) - 5;
                        
                        var treasure = this.Space.CreateAtPosition(Archetype.Gear, position);
                        AdvInventory.PlayerInventory["Gears"] -= 1;
                        
                        treasure.RigidBody.Velocity = Real3(randomVelocityNegative,randomVelocityPositive, 0);
                    }
                }
                
                if(AdvInventory.PlayerInventory["HealthPotion"] > 0)
                {
                    var rand = new Random();
                    this.RandomDieRoll = rand.DieRoll(10);
                    var randomVelocityNegative = rand.DieRoll(10) - 5;
                    var randomVelocityPositive = rand.DieRoll(10) - 5;
                    
                    var treasure = this.Space.CreateAtPosition(Archetype.HealthPotion, position);
                        AdvInventory.PlayerInventory["HealthPotion"] -= 1;
                    treasure.RigidBody.Velocity = Real3(randomVelocityNegative,randomVelocityPositive, 0);
                }
            }
                
            //Respawn
            if (this.Owner.PlayerController.LoseTimer <= 0)
            {
                Health.IsDead = false;
                this.Owner.Transform.Translation = Checkpoint.RespawnPosition;
                
                Health.CurrentHealth = Health.MaxHealth;
                
                
                Hunger.Hunger = Hunger.MaxHunger;
                
                this.Owner.PlayerController.Dead = false;
                this.Owner.PlayerController.LoseTimer = 60;
                this.Owner.RigidBody.Static = false;
                this.Owner.Sprite.Visible = true;
                Health.RegenOff = false;
                Inventory.Exists = false;
                Health.CurrentHealth -= 1;
            }
            
        }
        
        //Manuel Respawn
            if(Zero.Keyboard.KeyIsPressed(Keys.Y))
            {
                this.Owner.Transform.Translation = Checkpoint.RespawnPosition;
            }
    }
    
}
