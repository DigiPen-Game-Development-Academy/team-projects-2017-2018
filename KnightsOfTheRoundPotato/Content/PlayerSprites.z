class PlayerSprites : ZilchComponent {
    
    var Dir : Real3 = Real3(0);
    
    var Timer : Real = 0;
    
    var LDir : Real3 = Real3(0);
    
    [Property] var North      : SpriteSource;
    [Property] var NorthEast  : SpriteSource;
    [Property] var East       : SpriteSource;
    [Property] var SouthEast  : SpriteSource;
    [Property] var South      : SpriteSource;
    [Property] var SouthWest  : SpriteSource;
    [Property] var West       : SpriteSource;
    [Property] var NorthWest  : SpriteSource;
    [Property] var AnimSpeed  : Real;
    
    var Lock : Boolean = false;

    function Update(dt : Real) {
        
        if(this.Lock) {
            
            this.Timer -= dt;
            if(this.Timer <= 0) {
                this.Lock = false;
            }
            this.Owner.Sprite.AnimationSpeed = 1;
            this.Owner.Sprite.AnimationActive = true;
            return;
        }
        
        var hSprite = this.Owner.FindChildByName("Hold").Sprite;
        
        if(this.Timer > 0) {
            this.Dir = this.LDir;
            this.Timer -= dt;
        }
        
        var angle = Math.ToDegrees(Math.ATan2(this.Dir.Y, this.Dir.X));
        if(angle >= 22.5)
            angle -= 360;
        if(angle < 22.5 && angle > -22.5) {
            if(this.Owner.Sprite.SpriteSource != this.East)
                this.Owner.Sprite.SpriteSource = this.East;
            hSprite.CurrentFrame = 0;
        } else if(angle < -22.5 && angle > -67.5) {
            if(this.Owner.Sprite.SpriteSource != this.SouthEast)
                this.Owner.Sprite.SpriteSource = this.SouthEast;
            hSprite.CurrentFrame = 7;
        } else if(angle < -67.5 && angle > -112.5) {
            if(this.Owner.Sprite.SpriteSource != this.South)
                this.Owner.Sprite.SpriteSource = this.South;
            hSprite.CurrentFrame = 6;
        } else if(angle < -112.5 && angle > -157.5) {
            if(this.Owner.Sprite.SpriteSource != this.SouthWest)
                this.Owner.Sprite.SpriteSource = this.SouthWest;
            hSprite.CurrentFrame = 5;
        } else if(angle < -157.5 && angle > -202.5) {
            if(this.Owner.Sprite.SpriteSource != this.West)
                this.Owner.Sprite.SpriteSource = this.West;
            hSprite.CurrentFrame = 4;
        } else if(angle < -202.5 && angle > -247.5) {
            if(this.Owner.Sprite.SpriteSource != this.NorthWest)
                this.Owner.Sprite.SpriteSource = this.NorthWest;
            hSprite.CurrentFrame = 3;
        } else if(angle < -247.5 && angle > -292.5) {
            if(this.Owner.Sprite.SpriteSource != this.North)
                this.Owner.Sprite.SpriteSource = this.North;
            hSprite.CurrentFrame = 2;
        } else {
            if(this.Owner.Sprite.SpriteSource != this.NorthEast)
                this.Owner.Sprite.SpriteSource = this.NorthEast;
            hSprite.CurrentFrame = 1;
        }
        
        this.Owner.Sprite.AnimationSpeed = Math.Distance(Real3(0), this.Owner.RigidBody.Velocity) * this.AnimSpeed;
        
        if(Math.Distance(Real3(0), this.Owner.RigidBody.Velocity) == 0) {
            this.Owner.Sprite.AnimationActive = false;
            this.Owner.Sprite.CurrentFrame = 0;
        } else {
            this.Owner.Sprite.AnimationActive = true;
        }
        
    }
    
    function LockDir (dir : Real3, time : Real) {
        
        this.LDir = dir;
        this.Timer = time;
        
    }
    
}
