// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Weapon {
    
    var Space : Space = null;
    
    var ItemName : String = "WeaponUndefined";
    var AmmoTypeID : Integer = 0;
    var ItemID : Integer = 0;
    var ItemTier : Integer = 1;
    
    var MaxAmmo : Integer = -1;
    var CurrentAmmo : Integer = -1;
    
    var IsRanged : Boolean = false;
    var IsDrill : Boolean = false;
    var IsShotgun : Boolean = false;
    var IsLoaded : Boolean = true;
    
    var Cooldown : Real = 0.0;
    var CurrCooldown : Real = 0.0;
    var ReloadTime : Real = 3.0;
    
    var BulletDamage : Real = 1.0;
    var BulletSpeed : Real = 10.0;
    var Accuracy : Real = 0.0;
    
    var BulletSpawnLocation : Real3 = Real3(0.0, -0.2, 0.0);
    
    constructor(space : Space, itemName : String, itemID : Integer, isRanged : Boolean) {
        this.Space = space;
        this.ItemName = itemName;
        this.ItemID = itemID;
        this.IsRanged = isRanged;
        Console.WriteLine("Weapon with name \"`this.ItemName`\" has been created.");
    }
    
    constructor(space : Space, itemName : String, itemID : Integer, isRanged : Boolean, cooldown : Real, damage : Real) {
        this.Space = space;
        this.ItemName = itemName;
        this.ItemID = itemID;
        this.IsRanged = isRanged;
        this.Cooldown = cooldown;
        this.BulletDamage = damage;
        Console.WriteLine("Weapon with name \"`this.ItemName`\" has been created.");
    }
    
    function SetTier(tier : Integer) {
        this.ItemTier = tier;
        this.GiveStats();
    }
    
    function SetAccuracy(accuracy : Real) {
        this.Accuracy = accuracy;
    }
    
    function SetBulletSpeed(speed : Real) {
        this.BulletSpeed = speed;
    }
    
    function SetBulletSpawnPosition(pos : Real2) {
        this.BulletSpawnLocation = Real3(pos.X, pos.Y, -0.05);
    }
    
    function SetMaxAmmoAmount(amount : Integer, refill : Boolean) {
        this.MaxAmmo = amount;
        if(refill) {
            this.CurrentAmmo = amount;
            PlayerData.WeaponData.Set(this.ItemID, this.CurrentAmmo);
        } else {
            this.CurrentAmmo = PlayerData.WeaponData[this.ItemID];
        }
        Console.WriteLine("Data: `PlayerData.WeaponData`");
        this.GiveStats();
    }
    
    function SetCurrentAmmoAmount(amount : Integer) {
        this.CurrentAmmo = amount;
        PlayerData.WeaponData.Set(this.ItemID, this.CurrentAmmo);
    }
    
    function SetAmmoType(type : Integer) {
        this.AmmoTypeID = type;
    }
    
    function GiveStats() {
        
        var tierTag = "Weapon";
        
        if(this.ItemTier == 1)
            tierTag = "Basic Weapon";
        else if(this.ItemTier == 2)
            tierTag = "Medium Weapon";
        else if(this.ItemTier == 3)
            tierTag = "Legendary Weapon";
        
        if(Relocation.ItemManager.GetIDByName("Item`this.ItemName`") != -999)
            (Relocation.Items[Relocation.ItemManager.GetIDByName("Item`this.ItemName`")] as ItemWeapon).GiveStats(this, tierTag);
        
    }
    
    function RefillAmmo() {
        this.CurrentAmmo = this.MaxAmmo;
        PlayerData.WeaponData.Set(this.ItemID, this.CurrentAmmo);
    }
    
    function UseWeapon() {
        
        if(this.IsRanged) {
            
            var spawnAmt = 1;
            
            if(this.IsShotgun)
                spawnAmt = 5;
            
            for(var i = 0; i < spawnAmt; ++i) {
                
                var rand = Random();
                
                var accuracy = rand.Range(-this.Accuracy / 2, this.Accuracy / 2);
                
                var bullet = this.Space.CreateAtPosition(Archetype.EntityBullet, Real3(this.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation.XY, 0) + this.BulletSpawnLocation);
                
                var mousePos = this.Space.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
                var gunPos = this.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation;
                
                var dif = Real2(mousePos.X - gunPos.X, mousePos.Y - gunPos.Y);
                var magnitude = Math.Sqrt(dif.X * dif.X + dif.Y * dif.Y);
                
                if(magnitude == 0)
                    magnitude = 0.01;
                
                var velocity = Real3(dif.X / magnitude * this.BulletSpeed + accuracy, dif.Y / magnitude * this.BulletSpeed + accuracy, 0.0);
                
                bullet.RigidBody.Velocity = velocity;
                bullet.EntityBullet.FromPlayer = true;
                bullet.EntityBullet.SpawnedBy = Relocation.Player;
                bullet.EntityBullet.Damage = this.BulletDamage;
                bullet.EntityBullet.PostInitialize(Relocation.Player);
                
                var cam = this.Space.FindObjectByName("Camera");
                cam.Transform.Translation = Real3(Math.Lerp(cam.Transform.Translation.XY, -(velocity.XY / 500), 0.066), cam.Transform.Translation.Z);
                
            }
            
            if(this.MaxAmmo != -1) {
                --this.CurrentAmmo;
                PlayerData.WeaponData.Set(this.ItemID, this.CurrentAmmo);
            }
            
        } else if(this.IsDrill) {
            
            // DRILL
            
            var bullet = this.Space.CreateAtPosition(Archetype.EntityMelee, Real3(this.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation.XY, 0) + this.BulletSpawnLocation);
            var mousePos = this.Space.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
            var gunPos = this.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation;
            
            var dif = Real2(mousePos.X - gunPos.X, mousePos.Y - gunPos.Y);
            var magnitude = Math.Sqrt(dif.X * dif.X + dif.Y * dif.Y);
            
            if(magnitude == 0) {
                magnitude = 0.001;
            }
            
            var velocity = Real3(dif.X / magnitude * this.BulletSpeed, dif.Y / magnitude * this.BulletSpeed, 0.0);
            
            bullet.RigidBody.Velocity = velocity;
            bullet.EntityBullet.FromPlayer = true;
            bullet.EntityBullet.Damage = 0.0;
            bullet.EntityBullet.BlockDamageAmount = 0.75;
            bullet.EntityBullet.DrillBullet = true;
            bullet.EntityBullet.Lifetime = 0.1;
            bullet.EntityBullet.SpawnedBy = Relocation.Player;
            bullet.EntityBullet.PostInitialize(Relocation.Player);
            
        } else {
            
            // MELEE
            
        }
        
    }
    
    function UpdateWeapon(dt : Real) {
        
        this.GiveStats();
        
        //var uiSpace = this.Space.FindObjectByName("LevelSettings").UICreator.UISpace;
        //uiSpace.FindObjectByName("Slot20").Sprite.SpriteSource = SpriteSource.Find(String.Concatenate("Item", this.ItemName));
        //uiSpace.FindObjectByName("Slot20").Sprite.StartFrame = 1;
        
        if(this.CurrCooldown <= 0.0 && !Relocation.InventoryOpen) {
            if(Zero.Mouse.IsButtonDown(MouseButtons.Left) && (this.CurrentAmmo > 0 || this.CurrentAmmo == -1)) {
                this.CurrCooldown = this.Cooldown;
                this.UseWeapon();
            } else if(Zero.Mouse.IsButtonDown(MouseButtons.Left) && this.CurrentAmmo <= 0 && this.CurrentAmmo != -1) {
                
                this.CurrCooldown = this.Cooldown;
                
                // PLAY OUT OF AMMO SOUND
                Relocation.Player.SoundObject.PlayCue(SoundCue.Find("WeaponNoAmmo"));
                
                if(this.Space.FindObjectByName("EntityPlayer").Inventory != null) {
                    
                    var inv = this.Space.FindObjectByName("EntityPlayer").Inventory;
                    
                    if(inv.CheckForItem(this.AmmoTypeID)) {
                        this.RefillAmmo();
                        inv.RemoveItem(this.AmmoTypeID);
                        this.CurrCooldown = this.ReloadTime;
                        
                        // PLAY 3 SECOND RELOADING SOUND
                    }
                    
                }
                
            }
        } else {
            this.CurrCooldown -= dt;
        }
    }
    
}
