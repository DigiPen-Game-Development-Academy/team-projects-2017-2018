//Author Brandon Wolenetz

class BasicPathFollowAI : ZilchComponent {
    
    var Timer : Real = 1;
    
    var Target : Real3;
    
    var TurnSpeed : Real = 360;
    
    var Stunned : Boolean = false;
    
    var Instaturn : Boolean = false;
    
    var Active : Boolean = true;
    
    function Initialize(init : CogInitializer) {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.Stun, this.OnStun);
    }

    function OnStun(event : Stun) {
        this.Stunned = true;
        this.Timer = event.Time;
    }

    function OnLogicUpdate(event : UpdateEvent) {
        
        if(!this.Active)
            return;
        
        this.Timer -= event.Dt;
        
        var tSpeed = Math.ToRadians(this.TurnSpeed);
        var angle = Math.ATan2(this.Owner.EnemyAI.ViewDirection.Y, this.Owner.EnemyAI.ViewDirection.X);
        
        this.Owner.RigidBody.Velocity = Math.Normalize(this.Owner.EnemyAI.ViewDirection);
        
        if(this.Stunned) {
            if(this.Timer <= 0)
                this.Stunned = false;
            
            angle += tSpeed*event.Dt;
            
            this.Owner.RigidBody.Velocity *= this.Owner.EnemyAI.MoveSpeed;
            
            this.Owner.EnemyAI.ViewDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
            
            return;
        }
        
        if(this.Owner.EnemyPathFind.Path != null && (this.Owner.EnemyPathFind.Path.Count <= 0 || this.Timer <= 0)){
            this.Timer = 1;
            this.Owner.EnemyPathFind.Recalculate(this.Target);
            if(this.Owner.EnemyPathFind.Path != null && this.Owner.EnemyPathFind.Path.Count <= 0){
                this.Owner.EnemyPathFind.Path = null;
            }
        }
        
        if(this.Owner.EnemyPathFind.Path == null){
            this.Owner.RigidBody.Velocity = Real3(0);
        } else {
            var tDir = this.Owner.EnemyPathFind.Path[0].WorldPos - this.Owner.Transform.WorldTranslation;
            
            var tAngle = Math.ATan2(tDir.Y, tDir.X);
            var a = Math.ATan2(Math.Sin(tAngle-angle), Math.Cos(tAngle-angle));
            if(Math.ToDegrees(a) > 180)
                a -= Math.ToRadians(360);
            if(Math.ToDegrees(a) < -180)
                a += Math.ToRadians(360);
            //Console.WriteLine(Math.ToDegrees(a));
            if(Math.Abs(a - angle) < tSpeed*event.Dt)
                angle = tAngle;
            else if(a > 0) {
                angle += tSpeed*event.Dt;
            } else {
                angle += -tSpeed*event.Dt;
            }
            
            if(this.Instaturn) {
                angle = tAngle;
            }
            
            if(Math.Abs(a) > Math.ToRadians(20)) {
                this.Owner.RigidBody.Velocity = Real3(0);
            }
            
            if(Math.Distance(this.Owner.EnemyPathFind.Path[0].WorldPos, this.Owner.Transform.WorldTranslation) < 0.2)
                this.Owner.EnemyPathFind.Recalculate(this.Target);
        }
        
        this.Owner.EnemyAI.ViewDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
        
    }
    
    function SetTarget (target : Real3) {
        this.Target = target;
        if(this.Owner.EnemyPathFind.Path == null) {
            this.Timer = 1;
            this.Owner.EnemyPathFind.Recalculate(this.Target);
        }
    }
    
}
